/*COMMON(공통)*/ 
body{
  /*기본세팅*/
  color:#333;
  font-size:16px;
  font-weight:400;
  line-height:1.4;
  font-family:'Nanum Gothic',sans-serif;
  
}

img{
  display: block;
  /*이미지 태그에서 사용할 모든 요소들을 block요소로 사용하겠다*/
}

a{
  text-decoration: none;
}

.inner{
  /* 프로젝트 안에 있는 모든 inner 클래스*/ 
  width:1100px;
  margin:0 auto; /*browser가 자동으로 중앙정렬 시킬 수있도록*/
  /* 대부분의 경우, 가운데로 몰아져 있는 그 영역 안에서 특정한 요소들을 
  '배치'를 통해서 위치를 잡아줄 것이므로 기본적으로
  position을 설정해서 위치상의 '부모요소'가 될 수 있는 relative를 추가해줌*/
   position: relative; 
}

.btn{
  width:130px;
  padding:10px;
  border:2px solid #333;
  border-radius: 4px;;
  color:#333;
  font-size:16px;
  font-weight: 700;;
  text-align: center;
  cursor:pointer;
  box-sizing: border-box;
  display: block; /*span || a태그에 .btn을 부여할 때에도 정상적으로 나올 수 있도록*/
  transition:.4s;
}

.btn:hover{
  background-color: #333;;
  color:#fff;
}

.btn.btn--reverse{
  /* 완성된 페이지를 보면, 버튼이 여러종류가 있음
     여러가지 종류의 버튼 미리 만들어 놓기*/
  /* btn--reverse는 btn과 일치선택자(선택자--상태)*/
  background-color: #333;
  color:#fff;
  /*btn-reverse는 이미 기본 색상이 #333*/
  /* btn-reverse라는 상태가 붙어있는 버튼의 점수는
     .btn -> 10점 + 선택자 하나 추가(.btn-reverse) 10점 = 20점
     따라서 기본버튼의 효과를 덮어쓸 수 있는 우선순위 효과 확보*/    
}

.btn.btn--reverse:hover{  
  background-color: transparent;
  color:#333;
}

.btn.btn--brown{
  color:#592818;
  border:2px solid #592818;
}

.btn.btn--brown:hover{
  color:#fff;
  background-color: #592818;
}

.btn.btn--gold{
  color:#D9AA8A;
  border:2px solid #D9AA8A;
}

.btn.btn--gold:hover{
  color:#fff;
  background-color: #D9AA8A;
}

.btn.btn--white{
  color:#fff;
  border:2px solid  #fff;
}

.btn.btn--white:hover{
  color:#333;
  background-color: #fff;
}
/*공통의 애니메이션을 지정*/
.back-to-position{
  opacity: 0; 
  transition:1s;
    /* back-to-position이라는 클래스를 가진 어떤 요소들이 있는데
    그 요소들은 기본적으로 opacity값이 0.
    즉,화면엔 안보이는 투명한 값이 되는 것
    */
}

.back-to-position.to-right{
/*왼쪽에서 오른쪽으로 나타나는 애니메이션*/

transform:translateX(-150px) ;
/*translateX(-150px) 값으로 왼쪽으로 이동된 상태*/
/*x축으로, 수평으로 -150px 지점으로 이동시키는 내용*/
/* 수평값의 기본값은 0. 여기서 -150px로 이동하니까
   기본적으로 화면에 있는 요소가 왼쪽으로 이동*/
/* 그렇게 왼쪽으로 이동이 되었다하면 다시 원래상태로 돌아온다는 것은
   '왼쪽에서 오른쪽'으로 이동하는 개념이 됨*/

}

.back-to-position.to-left{

/*오른쪽에서 왼쪽으로 나타나는 애니메이션*/
transform:translateX(150px);
/* translate(150px)로 오른쪽으로 이동된 상태*/
/* 원래 위치에서 x축으로 150px 이동한 지점에 요소가 보일테니까
   원래 상태로 돌아온다면 '오른쪽에서 왼쪽'으로 이동하는 것처럼 보이게 됨*/
}

.show .back-to-position{
  opacity:1; 
  transform: translateX(0);
  /* 그런데, back-to-position라는 클래스를 가진 요소들이
    .show라는 클래스를 가진 경우의 '후손'인 경우에는 
    그것이 opacity:1를 통해 다시 화면에 보이고,  
    위치의 변화가 원래 있었던 그 지점(translate:0)으로 돌아오는 개념
    ==> 결국 show 클래스가 해당하는 section에 있어야지만 원래 상태로 
        돌아올 수 있음*/ 
 
}

.show .back-to-position.delay-0{
  /*transition-delay: 처리를 몇 초 뒤에 시작할 건지*/
  /* 각 transition-delay를 주는 이유?
    : 요소들이 애니메이션화 될 때 한번에 같이 나타나는게 아니라
      시간차로 나타날 수 있음*/
  transition-delay:0s;

}

.show .back-to-position.delay-1{
  transition-delay:.3s

}

.show .back-to-position.delay-2{

  transition-delay:.6s

}

.show .back-to-position.delay-3{

  transition-delay:.9s

}



/*HTML보다 CSS에 먼저 내용을 추가하고, CSS 내용의 선택자에 맞게
 hTML에 클래스를 부여해주면 그것도 좋은 방법임<20211123>*/

/*HEADER*/
header{
  background-color: #f6f5f0;
  border-bottom: 1px solid #c8c8c8;
  /* position:relative; */
  position:fixed; /*브라우저의 viewport를 기준으로 배치하겠다*/
  top:0px;
  width:100%;
  z-index:9;
  /*앞으로 만들 다른 섹션보다 header의 섹션이 제일 위에 쌓이도록*/
}

header >.inner{
  /* header의 바로 자식요소인 innder부분만 높이가 120px
     그 외에 메인메뉴 안에 들어있는 두 개의 층을 만들 것들은
     그 안에 들어있는 내용만큼 다른 height값을 가져야 하기 때문에
     영향을 미칠 수 없게 header >.inner로 범위 지정*/
  
  height:120px; /*header 자체의 height값*/
   
  /*innder는 header의 왼쪽에만 붙어있음*/
 
  /*좌,우 값은 브라우저가 자동으로 계산할 수 있도록 
    auto값 추가
    => 헤더의 중앙으로 정렬됨*/
  background-color:#f6f5f0;
  
  /*logo가 header 영역 안에서(relative) 수직 가운데에 배치가 됨*/ 
}

header .logo{
 height:75px; /*로고의 실제 높이값을 정확하게 명시*/
 position: absolute; /*부모요소를 기준으로 배치하겠다*/
 top:0; 
 bottom: 0; /*top에서부터 0px지점, bottom에서부터 0px지점의 
             수직의 위/아래 부분에 지점을 찍어주고,*/
left:0; /*부모요소인inner을 기준으로 왼쪽에 붙어있다*/ 
margin: auto; 

}

header .sub-menu{
  /*서브메뉴&search란을 같은 줄에 위치시키기*/
  /*search가 이동하면서 검색창과 검색아이콘이 합쳐짐*/
  display:flex;
  position:absolute;
  top:10px; 
  right:0px;


}

header .sub-menu ul.menu{
  font-family:Arial,sans-serif;/*sub메뉴는 arial을 주로 사용*/
  display: flex;

}

header .sub-menu ul.menu li{
  position: relative; /*before 가상선택자의 부모요소*/
}

header .sub-menu ul.menu li::before{
  content:"";
  width:1px;
  height:12px;
  background-color: #e5e5e5;
  position:absolute;/*부모요소에 상속받을 수 있도록/display:block으로 자동 변경*/
  top:0;
  bottom:0; /*margin값까지 부여하면 수직 중앙정렬*/
  margin:auto 0;
}

header .sub-menu ul.menu li:first-child::before{
  /*첫번째 li요소만 찾아서 그 부분의 before값은 안보이게 설정*/
  display:none
}

header .sub-menu ul.menu li a{
  
  font-size: 12px;
  padding:11px 16px;
  display:block;
  color:#655655;
 
}

header .sub-menu ul.menu li a:hover{
 color:#000;
}

header .sub-menu .search{
   
    height:34px; /*검색부분의 높이값*/
    position:relative;
}

header .sub-menu .search input{
     width:36px;
     height:34px;
     padding: 4px 10px;
     border:1px solid #ccc;
     box-sizing: border-box;
     border-radius: 5px;
     outline:none; /*검색창 눌렀는때 border말고 나오는 또다른 선을 사용하지 않겠다*/
     background-color:#fff; /*모든 브라우저에서 같은 색상이 보이도록*/
     color:#777; /*검색창 안 글자 색*/
     transition: width 0.4s;
     font-size:12px

}
header .sub-menu .search input:focus{
  /*input요소가 focus되면*/
  width:190px;
  border-color:#669900; /*스벅 컬러*/
}

header .sub-menu .search .material-icons-outlined{
  position:absolute;
  height:24px; /* google material icon의 폰트 크기=24px*/
  top:0;
  bottom:0;
  right:5px; /*부모요소를 기준으로 우측에서 5px지점에 아이콘 위치 
  margin:auto; /*수직 가운데 배치*/
  margin:auto;
  transition:0.4s;
}

header .sub-menu .search.focused .material-icons-outlined{
 /* focus가 될때 JS에서 추가한 클래스인 focused 스타일링*/
 /*.search와 .focused는 일치선택자로, 붙어서 작성해야 함
    why? focused는 search라는 클래스를 가진 요소에 붙고 빠지기 때문*/
 /*focused가 된 상태에서는 icon을 안보이게 하겠다*/
 opacity:0;
}

header .main-menu{
  position:absolute;
  /* .main-menu를 부모요소 안에서 원하는 위치에 위치하고자*/
  bottom:0;
  right:0; 
  z-index:1; 

  display: flex;

}

header .main-menu .item{

}

header .main-menu .item .item__name{
  padding:10px 20px 34px 20px; /*top right bottom left*/
  font-family: Arial, sans-serif;
  font-size:13px;
}

header .main-menu .item:hover .item__name{
  background-color: #2c2a29;
  color:#669900;
  border-radius: 6px 6px 0 0; /*border의 상단 두 모서리부분에만 적용*/

}

header .main-menu .item .item__contents {
  width:100%;
  /* contents__name & contents__textture가 잘 출력되기 위한 용도*/
  position:fixed;
  /*viewport를 기준으로 배치하겠다*/
  /* top이나 bottom속성을 사용하지 말기! 
     =>수직값이 없다면 요소의 원래위치를 그대로 사용
       만약 position:absolute를 사용했다면, (위치상) 부모요소를 기준으로 하므로 화면의
       뷰포트 좌우 끝까지 늘어날 수 없게됨*/
   left:0;  
   /*postion:fiexed를 통해서 viewport를 기준으로 하기 때문에
     주변요소에 전혀 상관하지 않고 viewport를 기준으로 contents__name / contents__texture가
     원하는 부분에 정상 배치됨*/
   display: none; 
   /* contents__name & contnets_texture이 더이상 보이지 않도록*/     
}

header .main-menu .item:hover .item__contents {
  display: block;
  /* 마우스를 올리면 contents__name & contents__textture가 뜨게 됨*/
}

header .main-menu .item .item__contents .contents__menu{
   background-color:#2c2a29
   
}

/*20211121*/
header .main-menu .item .item__contents .contents__menu > ul{
 /* .contents__menu > ul : > 자식선택자 사용한 이유
    :  .contents__menu 안에는 ul태그가 2개 있음.
       따라서 자식 선택자로 명시하지 않으면 하위 선택자가 되고 결국에는 
       CSS에 적용한 것이 모든 ul태그에 적용돼버림
    : 따라서 여러 ul태그가 하나의 태그에 들어있다면 꼭 자식클래스를 사용하여
      어떤 클래스에 영향을 줄건지를 명시하는게 중요*/
    display: flex;
    padding:20px 0;
}

header .main-menu .item .item__contents .contents__menu > ul>li{
  /*ul태그는 li태그를 당연히 포함해야 하므로 내부구조를 명확히 해주기 위해서 
    자식클래스를 사용하게 됨*/
   width:220px;

  }

header .main-menu .item .item__contents .contents__menu > ul>li h4{
 padding: 3px 0 12px 0;
 font-size: 14px;
 color:#fff;
}

header .main-menu .item .item__contents .contents__menu > ul>li ul li{
  /* 스타벅스 원두 스타벅스 비아....*/
  padding:5px 0;
  font-size:12px;
  color:#999;
  cursor: pointer;;
  /* 마우스를 올리면 마우스 모양에서 손가락 모양으로 변화*/
}
header .main-menu .item .item__contents .contents__texture{
  padding:26px 0; /*내부여백*/
  font-size: 12px;
  background-image: url("/images/main_menu_pattern.jpg"); /*패턴지정*/
}

header .main-menu .item .item__contents .contents__texture h4 {
  color:#999;
  font-weight: 700;
 
}

header .main-menu .item .item__contents .contents__texture p {
  color:#669900;
  margin:4px 0 14px; /*top/left,right/bottom*/
 
}

header .main-menu .item .item__contents .contents__menu > ul>li ul li:hover{
  color:#669900;
}

/*2021 11 22 배지*/
header .badges{
  position:absolute;
  /* 부모요소에 따라 적용
     부모요소 - header*/
  top:132px;
  right:12px;
}

header .badges .badge{
  border-radius: 10px;;
  overflow: hidden;
  /*badget안에 들어있는 이미지가 넘치지 않도록*/
  margin-bottom:12px;
  /*2개의 배지 사이의 간격 추가*/
  box-shadow: 4px 4px 10px rgb(0,0,0,.15) ; /*x y blur 검정색 추가 투명도*/
  cursor: pointer;
}

/*FOOTER*/
footer{
  background-color:#272727;
  border-top:1px solid #333;
}

footer .inner{
  padding:40px 0 60px 0;
}

footer .menu{
  display:flex;
  justify-content: center;

}

footer .menu li{
  position: relative;

}

footer .menu li::before{ /* 점 만들기*/
  content:"";
  width:3px;
  height:3px;
  background-color:#555;
  position:absolute; /* position : absolute or flex => display 값이 자동으로 block으로 처리됨*/
  top:0;
  bottom:0;
  margin:auto;
  right:-1px;

}

footer .menu li:last-child::before{
  display:none;

}
footer .menu li a{
  color:#ccc;
  font-size:12px;
  font-weight: 700;;
  padding:15px; /*a태그 클릭 범위 확대*/
  display: block;
}


footer .menu li a.green{
 color:#669900;
}

footer .btn-group{
  margin-top:20px;
  display: flex;
  justify-content: center;

}

footer .btn-group .btn{
  font-size:12px;
  margin-right:10px;

}

footer .btn-group .btn:last-child{
  margin-right:0;
}

footer .info{
  margin-top:30px;
  text-align: center;;
}

footer .info span{
  margin-right:20px;
  color:#999;
  font-size:12px;
}
footer .info span:last-child{
  margin-right:0px;
}

footer .copyright{
  color:#999;
  font-size:12px;
  text-align: center;;
  margin-top:12px;

}

footer .logo{
 /* 가운데 정렬을 위해서는 width값이 보편적으로 꼭 필요하나,
    logo는 이미지이기 때문에, 브라우저가 이미 이미지의 너비를 알고 있음*/ 
  margin:30px auto 0; /*상 왼/오 하*/


}

footer .copyright .this-year{

}

footer .copyright .logo{

}
